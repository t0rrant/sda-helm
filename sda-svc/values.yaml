# Default values for SDA services.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global:

# Path where the sensitive files can be found, default is "/etc/ega".
# TLS certificates or C4GH key locations can be set using global.tlsPath or global.c4ghPath respectively,
# this path will be a subpath to the secretsPath.
  secretsPath: /etc/ega
  c4ghPath: ""
  tlsPath: ""
  jwtPath: ""

# Name of an injected config file, located in the secretsPath
# If the file is located in a subpath it can be set using the confFilePath
# If no conf file is specified DB and MQ connections will be configured via ENVs
  # confFile: conf.ini
  # confFilePath: ""

# Deployment can be split into `external` and `internal` components
# by setting deploymentType to the desired type
# if left undefined or `all`, all services are deployed.
  deploymentType: "all"

  ingress:
    deploy: false
    hostName:
      auth: ""
      doa: ""
      s3Inbox: ""
# If the certificates is generated by external providers
# the secrets containing them needs to be created manually.
    secretNames:
      auth: ""
      doa: ""
      s3Inbox: ""
# issuer requires a configured cert-manager
    issuer: ""

  log: "info"

# utilize network isolation
# Make sure youâ€™ve configured a network provider with network policy support.
# There are a number of network providers that support NetworkPolicy, including:
# Calico, Cilium, Kube-router, Romana and Weave Net
  networkPolicy:
    create: false
    brokerNamespace: ""
    databaseNamespace: ""
    externalNamespace: ""
    internalNamespace: ""


  persistence: 
    enabled: true
## Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.

## RevisionHistory
##  If defined, set the revisionHistoryLimit of the deployment, defaults to 3
##  RevisionHistoryLimit is number of old ReplicaSets to retain to allow rollback.
  # revisionHistory: 3

# Annotations applied to pods of all services.
# This should be a multi-line string mapping directly to the a map of
# the annotations to apply to the service pods
  podAnnotations: {}

# If an external PKI infrastructure is used set this to true
  pkiService: false
  pkiPermissions: true

# Assume RBAC is enabled in the cluster
  rbacEnabled: true

  podSecurityPolicy:
    create: true

# global configurations
  archive:
    storageType: "S3Storage" # S3Storage or FileStorage
  # The six lines below is only used with S3 backend
    s3Url: ""
    s3Bucket: ""
    s3Region: "us-east-1"
    s3ChunkSize: 15 # Chunk size in MB > 5
    s3AccessKey: null
    s3SecretKey: null
    s3CaFile: null
    s3Port: 443
  # The two lines below is only used with FileStorage
    volumePath: "/ega/archive"
    volumeMode: 2750
    nfsServer: ""
    nfsPath: ""

  auth:
    jwtAlg: ES256
    jwtKey: ""
    jwtPub: ""
    useTLS: true

  broker:
    durable: false
    host: ""
    exchange: ""
    port: 5671
    verifyPeer: true
    vhost: "/"
# This 
    password: ""
    username: ""

  cega:
    host: ""
    user: ""
    password: ""

  c4gh:
# name of the c4gh key file.
    file: c4gh.key
    passphrase: ""

  db:
    host: ""
    name: "lega"
    passIngest: ""
    passOutgest: ""
    port: 5432
    sslMode: "verify-full"

  doa:
    outbox:
      enabled: false
      # MQ queue name for files/datasets export requests
      queue: ""
      # Outbox type can be either S3 or POSIX
      type: ""
      # Outbox location with placeholder for the username
      path: ""
      s3Url: ""
      s3Port: 443
      s3Region: ""
      s3Bucket: ""
      s3CaFile: null
      s3AccessKey: null
      s3SecretKey: null
    servicePort: 443

  elixir:
    pubKey: ""
    jwkPath: "/oidc/jwk"
    oidcdHost: "https://login.elixir-czech.org"

  inbox:
    servicePort: 2222
    storageType: "FileStorage"
  # These lines below are only used with FileStorage
    path: "/ega/inbox"
    user: "lega"
    nfsServer: ""
    nfsPath: ""
    existingClaim: ""
  # These lines below are only used with S3Storage
    s3Url: ""
    s3Bucket: "inbox"
    s3AccessKey: null
    s3SecretKey: null
    s3CaFile: null
    s3ReadyPath: ""
    s3region: ""

##################################
# service specific credentials
credentials:
  doa:
    dbUser: ""
    dbPassword: ""

  finalize:
    mqUser: ""
    mqPassword: ""
    dbUser: ""
    dbPassword: ""

  inbox:
    mqUser: ""
    mqPassword: ""

  ingest:
    mqUser: ""
    mqPassword: ""
    dbUser: ""
    dbPassword: ""

  verify:
    mqUser: ""
    mqPassword: ""
    dbUser: ""
    dbPassword: ""

##################################
# Service specifica settings

auth:
  name: auth
  replicaCount: 1
  repository: neicnordic/sda-auth
  imageTag: latest
  imagePullPolicy: Always
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "250m"
# Extra annotations to attach to the service pods
# This should be a multi-line string mapping directly to the a map of
# the annotations to apply to the service pods
  annotations: {}

doa:
  name: doa
  repository: neicnordic/sda-doa
  imageTag: latest
  imagePullPolicy: Always
  replicaCount: 1
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "1024Mi"
      cpu: "2000m"
  debugPort: 1234
  logpath: "/tmp/logs"
  keystorePass: "changeit"
# Extra annotations to attach to the service pods
# This should be a multi-line string mapping directly to the a map of
# the annotations to apply to the service pods
  annotations: {}

finalize:
  routingKey: ""
  errorKey: ""
  queue: ""
  name: finalize
  replicaCount: 1
  repository: neicnordic/sda-base
  imageTag: latest
  imagePullPolicy: IfNotPresent
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "250m"
# Extra annotations to attach to the service pods
# This should be a multi-line string mapping directly to the a map of
# the annotations to apply to the service pods
  annotations: {}

ingest:
  routingKey: ""
  errorKey: ""
  queue: ""
  name: ingest
  replicaCount: 1
  repository: neicnordic/sda-base
  imageTag: latest
  imagePullPolicy: Always
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "2000m"
# Extra annotations to attach to the service pods
# This should be a multi-line string mapping directly to the a map of
# the annotations to apply to the service pods
  annotations: {}

s3Inbox:
  name: s3Inbox
  repository: neicnordic/sda-s3proxy
  imageTag: latest
  imagePullPolicy: Always
  replicaCount: 1
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "1024Mi"
      cpu: "1000m"
# Extra annotations to attach to the service pods
# This should be a multi-line string mapping directly to the a map of
# the annotations to apply to the service pods
  annotations: {}

sftpInbox:
  name: sftpInbox
  repository: neicnordic/sda-inbox-sftp
  imageTag: latest
  imagePullPolicy: Always
  replicaCount: 1
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "250m"
  keystorePass: "changeit"
  nodeHostname: ""
# Extra annotations to attach to the pod
# This should be a multi-line string mapping directly to the a map of
# the annotations to apply to the service pods
  annotations: {}

verify:
  routingKey: ""
  errorKey: ""
  queue: ""
  replicaCount: 1
  repository: neicnordic/sda-base
  imageTag: latest
  imagePullPolicy: Always
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "2000m"
# Extra annotations to attach to the pod
# This should be a multi-line string mapping directly to the a map of
# the annotations to apply to the service pods
  annotations: {}
