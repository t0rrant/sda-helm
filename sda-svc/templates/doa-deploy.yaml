{{- if or (or (eq "all" .Values.global.deploymentType) (eq "external" .Values.global.deploymentType) ) (not .Values.global.deploymentType) }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "sda.fullname" . }}-doa
  labels:
    role: doa
    app: {{ template "sda.fullname" . }}-doa
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    component: "{{ .Values.doa.name }}"
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.doa.replicaCount }}
  revisionHistoryLimit: {{ default "3" .Values.global.revisionHistory }}
  selector:
    matchLabels:
      app: {{ template "sda.fullname" . }}-doa
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "sda.fullname" . }}-doa
        role: doa
        release: {{ .Release.Name }}
      annotations:
        {{- if not .Values.global.confFile }}
        checksum/secret: {{ include (print $.Template.BasePath "/doa-secrets.yaml") . | sha256sum }}
        {{- end }}
{{- if .Values.global.podAnnotations }}
{{- toYaml .Values.global.podAnnotations | nindent 8 -}}
{{- end }}
{{- if .Values.doa.annotations }}
{{- toYaml .Values.doa.annotations | nindent 8 -}}
{{- end }}
    spec:
    {{- if .Values.global.rbacEnabled}}
      serviceAccountName: {{ .Release.Name }}
    {{- end }}
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: doa
        image: "{{ .Values.doa.repository }}:{{ .Values.doa.imageTag }}"
        imagePullPolicy: {{ .Values.doa.imagePullPolicy | quote }}
        securityContext:
          allowPrivilegeEscalation: false
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: no-oss,LocalEGA
        - name: BROKER_HOST
          value: {{ required "A valid MQ host is required" .Values.global.broker.host | quote }}
        - name: BROKER_PORT
          value: {{ .Values.global.broker.port | quote }}
        - name: BROKER_VHOST
          value: {{ .Values.global.broker.vhost | quote }}
        - name: BROKER_CACERT
          value: {{ include "tlsPath" . }}/ca.crt
        - name: DB_INSTANCE
          value: {{ required "A valid database host is required" .Values.global.db.host | quote}}
        - name: POSTGRES_DB
          value: {{ required "A database name is required" .Values.global.db.name | quote }}
        - name: POSTGRES_USER
          value: {{ include "dbUserDoa" . | quote }}
        - name: SSL_MODE
          value: {{ .Values.global.db.sslMode | quote }}
        - name: POSTGRES_PASSWORD
          valueFrom:
              secretKeyRef:
                name: {{ template "sda.fullname" . }}-doa
                key: dbPassword
      {{- if eq "S3Storage" .Values.global.archive.storageType }}
        - name: S3_ENDPOINT
          value: {{ required "A valid archive S3 URL entry is required!" .Values.global.archive.s3Url | quote }}
        - name: S3_PORT
          value: {{ .Values.global.archive.s3Port | quote }}
        - name: S3_ACCESS_KEY
          valueFrom:
              secretKeyRef:
                name: {{ template "sda.fullname" . }}-s3archive-keys
                key: s3ArchiveAccessKey
        - name: S3_SECRET_KEY
          valueFrom:
              secretKeyRef:
                name: {{ template "sda.fullname" . }}-s3archive-keys
                key: s3ArchiveSecretKey
        - name: S3_REGION
          value: {{ .Values.global.archive.s3Region }}
        - name: S3_SECURE
          value: "true"
        - name: S3_BUCKET
          value: {{ .Values.global.archive.s3Bucket | quote}}
        {{- if .Values.global.archive.s3CaFile }}
        - name: S3_ROOT_CERT_PATH
          value: "/etc/ssl/certs/java/ca.crt"
        {{- end }}
      {{ else }}
        - name: ARCHIVE_PATH
          value: {{ .Values.global.archive.volumePath | quote }}
      {{- end }}
      {{- if .Values.global.elixir.pubKey }}
        - name: PASSPORT_PUBLIC_KEY_PATH
          value: "{{ include "secretsPath" . }}/{{ .Values.global.elixir.pubKey }}"
      {{- end }}
        - name: KEYSTORE_PATH
          value: {{ ternary "/etc/ssl/certs/java/doa.p12" (printf "%s/doa.p12" .Values.global.secretsPath ) (empty .Values.global.pkiService) }}
        - name: KEYSTORE_PASSWORD
          value: {{ .Values.doa.keystorePass | quote }}
        - name: ROOT_CERT_PATH
          value: {{ ternary "/etc/ssl/certs/java/ca.crt" (printf "%s/ca.crt" .Values.global.secretsPath) (empty .Values.global.pkiService) }}
        - name: CERT_PATH
          value: {{ ternary "/etc/ssl/certs/java/doa.crt" (printf "%s/doa.crt" .Values.global.secretsPath) (empty .Values.global.pkiService) }}
        - name: CERT_KEY
          value: {{ ternary "/etc/ssl/certs/java/doa.key.der" (printf "%s/doa.der" .Values.global.secretsPath) (empty .Values.global.pkiService) }}
        - name: CRYPT4GH_PRIVATE_KEY_PATH
          value: "{{ template "c4ghPath" . }}/{{ .Values.global.c4gh.file }}"
        - name: CRYPT4GH_PRIVATE_KEY_PASSWORD_PATH
          value: "{{ template "c4ghPath" . }}/passphrase"
        - name: OPENID_CONFIGURATION_URL
          value: "{{ .Values.global.elixir.oidcdHost }}/oidc/.well-known/openid-configuration"
      {{- if .Values.global.doa.outbox.enabled }}
        - name: OUTBOX_ENABLED
          value: {{ .Values.doa.outbox.enabled }}
        - name: OUTBOX_QUEUE
          value: {{ .Values.global.doa.outbox.queue | quote }}
        - name: OUTBOX_TYPE
          value: {{ .Values.global.doa.outbox.type | quote}}
        {{- if eq "s3" .Values.global.doa.outbox.type }}
        - name: S3_OUT_ENDPOINT
          value: {{ .Values.global.doa.outbox.s3Url | quote}}
        - name: S3_OUT_PORT
          value: {{ .Values.global.doa.outbox.s3Port | quote}}
        - name: S3_OUT_REGION
          value: {{ .Values.global.doa.outbox.s3Region | quote}}
        - name: S3_OUT_BUCKET
          value: {{ .Values.global.doa.outbox.s3Bucket | quote}}
        - name: S3_OUT_SECURE
          value: "true"
        {{- if .Values.global.doa.outbox.s3CaFile }}
        - name: S3_OUT_ROOT_CERT_PATH
          value: "/etc/ssl/certs/java/ca.crt"
        {{- end }}
        - name: S3_OUT_ACCESS_KEY
          valueFrom:
              secretKeyRef:
                name: {{ template "sda.fullname" . }}-doa
                key: s3OutboxAccessKey
        - name: S3_OUT_SECRET_KEY
          valueFrom:
              secretKeyRef:
                name: {{ template "sda.fullname" . }}-doa
                key: s3OutboxAccessKey
        {{- else }}
        - name: OUTBOX_LOCATION
          value: {{ .Values.global.doa.outbox.path | quote }}
        {{- end }}
      {{- end }}
      {{- if .Values.global.pkiService }}
        - name: PKI_PATH
          value: {{ include "secretsPath" . }}
      {{- end }}
        ports:
        - name: doa
          containerPort: 8080
          protocol: TCP
        livenessProbe:
          tcpSocket:
            port: doa
          initialDelaySeconds: 120
          periodSeconds: 30
        readinessProbe:
          tcpSocket:
            port: doa
          initialDelaySeconds: 30
          periodSeconds: 15
        resources:
{{ toYaml .Values.doa.resources | trim | indent 10 }}
        volumeMounts:
      {{- if not .Values.global.pkiService }}
        - name: tls-certs
          mountPath: "/etc/ssl/certs/java"
      {{- end }}
      {{- if not .Values.global.confFile }}
      {{- if .Values.global.elixir.pubKey }}
        - name: jwt-token
          mountPath: {{ include "secretsPath" . }}
      {{- end }}
        - name: c4gh-key
          mountPath: {{ template "c4ghPath" . }}
      {{- end }}
      {{- if eq "FileStorage" .Values.global.archive.storageType }}
        - name: archive
          mountPath: {{ .Values.global.archive.volumePath | quote }}
      {{- end }}
      volumes:
      {{- if not .Values.global.pkiService }}
        - name: tls-certs
          secret:
            secretName: {{ template "sda.fullname" . }}-doa-certs
            defaultMode: 0440
      {{- end }}
      {{- if not .Values.global.confFile }}
      {{- if .Values.global.elixir.pubKey }}
        - name: jwt-token
          projected:
            defaultMode: 0440
            sources:
            - secret:
                name: {{ template "sda.fullname" . }}-doa
                items:
                  - key: {{ .Values.global.elixir.pubKey }}
                    path: {{ .Values.global.elixir.pubKey }}
      {{- end }}
        - name: c4gh-key
          secret:
            secretName: {{ template "sda.fullname" . }}-c4gh
            defaultMode: 0440
      {{- end }}
      {{- if eq "FileStorage" .Values.global.archive.storageType }}
        - name: archive
          {{- if .Values.global.archive.existingClaim }}
          persistentVolumeClaim:
            claimName: {{ .Values.global.archive.existingClaim }}
        {{- else }}
          nfs:
            server: {{ required "An archive NFS server is required" .Values.global.archive.nfsServer | quote }}
            path: {{ if .Values.global.archive.nfsPath }}{{ .Values.global.archive.nfsPath | quote }}{{ else }}{{ "/" }}{{ end }}
        {{- end }}
      {{- end }}
{{- end }}
