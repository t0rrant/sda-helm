name: k3s deployment

on: [push,pull_request]

jobs:

  sftp-inbox:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install k3s
      run: curl -sfL https://get.k3s.io | sh -
    - name: Fix permissions & copy config file
      run: |
        sudo chmod 666 /etc/rancher/k3s/* 
        mkdir -p ~/.kube/ && cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
    - name: Install helm3
      run: |
        wget https://get.helm.sh/helm-v3.1.2-linux-amd64.tar.gz -O - | tar -xz
        sudo cp linux-amd64/helm /usr/local/bin/helm
    - name: Wait for k3s to become ready
      run: until kubectl -n kube-system get pods -lk8s-app=metrics-server -o jsonpath='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status}' | grep "Ready=True"; do echo "waiting for k3s to become ready"; sleep 10; done
    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: Clone and install deploy-init
      run: |
        git clone https://github.com/neicnordic/LocalEGA-deploy-init
        pip3 install LocalEGA-deploy-init/
        legainit --cega --config-path LocalEGA-deploy-init/config \
                 --svc-config .github/ci_tests/svc.conf
    - name: Copy DB certs
      run: |
        cp LocalEGA-deploy-init/config/certs/root.ca.crt sda-db/files/CA.crt
        cp LocalEGA-deploy-init/config/certs/db.ca.crt sda-db/files/pg.crt
        cp LocalEGA-deploy-init/config/certs/db.ca.key sda-db/files/pg.key
    - name: Deploy SDA database
      run: |
        DB_IN_PASS=$(grep pg_in_password LocalEGA-deploy-init/config/trace.yml | awk {'print $2'} | sed --expression 's/\"//g')
        DB_OUT_PASS=$(grep pg_out_password LocalEGA-deploy-init/config/trace.yml | awk {'print $2'} | sed --expression 's/\"//g')
        helm install postgres sda-db \
        --set securityPolicy.create=false,\
        global.pg_in_password="$DB_IN_PASS",\
        global.pg_out_password="$DB_OUT_PASS",\
        global.verifyPeer=false
    - name: Wait for database to become ready
      run: |
        RETRY_TIMES=0
        until kubectl get pods -lrole=database -o jsonpath='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status}' | grep "Ready=True";
        do echo "waiting for database to become ready";
        RETRY_TIMES=$((RETRY_TIMES+1));
        if [ $RETRY_TIMES -eq 10 ]; then exit 1; fi
        sleep 3;
        done
    - name: debug DB
      if: failure()
      run: kubectl describe pod -l role=database
    - name: log DB
      if: failure()
      run: kubectl logs postgres-sda-db-0
    - name: Get CEGA chart
      run: git clone https://github.com/nbisweden/LocalEGA-helm
    - name: Start CEGA services
      run: |
        cp -r LocalEGA-deploy-init/config LocalEGA-helm/ega-charts/cega/config
        ls -la LocalEGA-helm/ega-charts/cega/config
        cat LocalEGA-helm/ega-charts/cega/config/trace.yml
        helm install cega LocalEGA-helm/ega-charts/cega -f LocalEGA-helm/ega-charts/cega/config/trace.yml \
        --set podSecurityPolicy.create=false,\
        persistence.enabled=false
    - name: Wait for CEGA to become ready
      run: |
        RETRY_TIMES=0
        until kubectl get pods -l app=cega-mq -o jsonpath='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status}' | grep "Ready=True" || [ $RETRY_TIMES -eq 20 ];
        do echo "waiting for fake cega to become ready";
        RETRY_TIMES=$((RETRY_TIMES+1));
        if [ $RETRY_TIMES -eq 20 ]; then exit 1; fi
        sleep 10;
        done
    - name: debug cega
      if: failure()
      run: |
        for c in cega-users cega-mq
        do kubectl describe pod -l app=$c
        done
    - name: log cega
      if: failure()
      run: |
        for c in cega-users cega-mq
        do kubectl logs $(kubectl get pods | grep $c | awk '{print $1}')
        done 
    - name: Copy MQ certs
      run: |
        cp LocalEGA-deploy-init/config/certs/root.ca.crt sda-mq/files/ca.crt
        cp LocalEGA-deploy-init/config/certs/mq-server.ca.crt sda-mq/files/server.crt
        cp LocalEGA-deploy-init/config/certs/mq-server.ca.key sda-mq/files/server.key
    - name: Deploy SDA message broker
      run: |
        CEGA_MQ_PASS=$(grep cega_mq_pass LocalEGA-deploy-init/config/trace.yml | awk {'print $2'} | sed --expression 's/\"//g')
        helm install broker sda-mq \
        --set securityPolicy.create=false,\
        config.adminUser=admin,\
        config.adminPasswordHash="DI0kJIvQHptGSBH2coZ25dsjjN9Z4uxp8hAyqtd9H7rb/SBO",\
        config.shovel.host="cega-mq",\
        config.shovel.user=lega,\
        config.shovel.pass=$CEGA_MQ_PASS,\
        config.shovel.vhost=lega,\
        config.verifyPeer=false
    - name: Wait for broker to become ready
      run: |
        RETRY_TIMES=0
        until kubectl get pods -lrole=broker -o jsonpath='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status}' | grep "Ready=True";
        do echo "waiting for broker to become ready";
        RETRY_TIMES=$((RETRY_TIMES+1));
        if [ $RETRY_TIMES -eq 10 ]; then exit 1; fi
        sleep 10;
        done
    - name: debug MQ
      if: failure()
      run: kubectl describe pod -l role=broker
    - name: log MQ
      if: failure()
      run: kubectl logs broker-sda-mq-0
    - name: Prepare for deployment
      run: |
        cp LocalEGA-deploy-init/config/token.pub sda-svc/files/
        cp LocalEGA-deploy-init/config/ega_key.c4gh.sec sda-svc/files/c4gh.key
        cp LocalEGA-deploy-init/config/certs/*.p12 sda-svc/files/
        cp LocalEGA-deploy-init/config/certs/cacerts sda-svc/files/
        cp LocalEGA-deploy-init/config/certs/root.ca.crt sda-svc/files/ca.crt
        for n in doa finalize ingest verify
          do cp LocalEGA-deploy-init/config/certs/$n.ca.crt sda-svc/files/$(echo $n.ca.crt | cut -d '.' -f1,3)
        done
        for n in doa finalize ingest verify
          do cp LocalEGA-deploy-init/config/certs/$n.ca.key sda-svc/files/$(echo $n.ca.key | cut -d '.' -f1,3)
        done
    - name: Deploy the SDA stack
      run: |
        kubectl apply -f .github/ci_tests/posix-volumes.yaml
        CEGA_USERS_PASS=$(grep cega_users_pass LocalEGA-deploy-init/config/trace.yml | awk {'print $2'} | sed --expression 's/\"//g')
        DB_IN_PASS=$(grep pg_in_password LocalEGA-deploy-init/config/trace.yml | awk {'print $2'} | sed --expression 's/\"//g')
        DB_OUT_PASS=$(grep pg_out_password LocalEGA-deploy-init/config/trace.yml | awk {'print $2'} | sed --expression 's/\"//g')
        ARCHIVE_ACCESS_KEY=$(grep s3_archive_access_key LocalEGA-deploy-init/config/trace.yml | awk {'print $2'} | sed --expression 's/\"//g')
        ARCHIVE_SECRET_KEY=$(grep s3_archive_secret_key LocalEGA-deploy-init/config/trace.yml | awk {'print $2'} | sed --expression 's/\"//g')
        C4GH_PASSPHRASE=$(grep ega_c4gh_passphrase LocalEGA-deploy-init/config/trace.yml | awk {'print $2'} | sed --expression 's/\"//g')
        helm install posix sda-svc -f .github/ci_tests/posix.yaml \
        --set global.cega.password="$CEGA_USERS_PASS",\
        global.archive.s3AccessKey="$ARCHIVE_ACCESS_KEY",\
        global.archive.s3SecretKey="$ARCHIVE_SECRET_KEY",\
        global.db.passIngest="$DB_IN_PASS",\
        global.db.passOutgest="$DB_OUT_PASS",\
        global.c4gh.passphrase="$C4GH_PASSPHRASE"
    - name: Wait for SDA stack to become ready
      run: |
        RETRY_TIMES=0
        for p in doa finalize inbox ingest verify
        do
        until kubectl get pods -lrole=$p -o jsonpath='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status}' | grep "Ready=True"
        do echo "waiting for $p to become ready"
        RETRY_TIMES=$((RETRY_TIMES+1));
        if [ $RETRY_TIMES -eq 30 ]; then exit 1; fi
        sleep 10;
        done
        done
    - name: debug sda
      if: failure()
      run: |
        for s in doa finalize ingest verify inbox
        do kubectl describe pod -l role=$s
        done
    - name: log sda
      if: failure()
      run: |
        for s in doa finalize ingest verify inbox
        do kubectl logs $(kubectl get pods | grep $s | awk '{print $1}')
        done 

  s3-inbox:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install k3s
      run: curl -sfL https://get.k3s.io | sh -
    - name: Fix permissions & copy config file
      run: |
        sudo chmod 666 /etc/rancher/k3s/* 
        mkdir -p ~/.kube/ && cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
    - name: Install helm3
      run: |
        wget https://get.helm.sh/helm-v3.1.2-linux-amd64.tar.gz -O - | tar -xz
        sudo cp linux-amd64/helm /usr/local/bin/helm
    - name: Wait for k3s to become ready
      run: until kubectl -n kube-system get pods -lk8s-app=metrics-server -o jsonpath='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status}' | grep "Ready=True"; do echo "waiting for k3s to become ready"; sleep 10; done
    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: Clone and install deploy-init
      run: |
        git clone https://github.com/neicnordic/LocalEGA-deploy-init
        pip3 install LocalEGA-deploy-init/
        legainit --cega --config-path LocalEGA-deploy-init/config \
                 --svc-config .github/ci_tests/svc.conf
    - name: Copy DB certs
      run: |
        cp LocalEGA-deploy-init/config/certs/root.ca.crt sda-db/files/CA.crt
        cp LocalEGA-deploy-init/config/certs/db.ca.crt sda-db/files/pg.crt
        cp LocalEGA-deploy-init/config/certs/db.ca.key sda-db/files/pg.key
    - name: Deploy SDA database
      run: |
        DB_IN_PASS=$(grep pg_in_password LocalEGA-deploy-init/config/trace.yml | awk {'print $2'} | sed --expression 's/\"//g')
        DB_OUT_PASS=$(grep pg_out_password LocalEGA-deploy-init/config/trace.yml | awk {'print $2'} | sed --expression 's/\"//g')
        helm install postgres sda-db \
        --set securityPolicy.create=false,\
        global.pg_in_password="$DB_IN_PASS",\
        global.pg_out_password="$DB_OUT_PASS",\
        global.verifyPeer=false
    - name: Wait for database to become ready
      run: |
        RETRY_TIMES=0
        until kubectl get pods -lrole=database -o jsonpath='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status}' | grep "Ready=True";
        do echo "waiting for database to become ready";
        RETRY_TIMES=$((RETRY_TIMES+1));
        if [ $RETRY_TIMES -eq 10 ]; then exit 1; fi
        sleep 3;
        done
    - name: debug DB
      if: failure()
      run: kubectl describe pod -l role=database
    - name: log DB
      if: failure()
      run: kubectl logs postgres-sda-db-0
    - name: Get CEGA chart
      run: git clone https://github.com/nbisweden/LocalEGA-helm
    - name: Start CEGA services
      run: |
        cp -r LocalEGA-deploy-init/config LocalEGA-helm/ega-charts/cega/config
        ls -la LocalEGA-helm/ega-charts/cega/config
        cat LocalEGA-helm/ega-charts/cega/config/trace.yml
        helm install cega LocalEGA-helm/ega-charts/cega -f LocalEGA-helm/ega-charts/cega/config/trace.yml \
        --set podSecurityPolicy.create=false,\
        persistence.enabled=false
    - name: Wait for CEGA to become ready
      run: |
        RETRY_TIMES=0
        until kubectl get pods -l app=cega-mq -o jsonpath='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status}' | grep "Ready=True" || [ $RETRY_TIMES -eq 20 ];
        do echo "waiting for fake cega to become ready";
        RETRY_TIMES=$((RETRY_TIMES+1));
        if [ $RETRY_TIMES -eq 20 ]; then exit 1; fi
        sleep 10;
        done
    - name: debug cega
      if: failure()
      run: |
        for c in cega-users cega-mq
        do kubectl describe pod -l app=$c
        done
    - name: log cega
      if: failure()
      run: |
        for c in cega-users cega-mq
        do kubectl logs $(kubectl get pods | grep $c | awk '{print $1}')
        done 
    - name: Deploy mock oidc server
      run: kubectl apply -f .github/ci_tests/oidc.yaml
    - name: Copy MQ certs
      run: |
        cp LocalEGA-deploy-init/config/certs/root.ca.crt sda-mq/files/ca.crt
        cp LocalEGA-deploy-init/config/certs/mq-server.ca.crt sda-mq/files/server.crt
        cp LocalEGA-deploy-init/config/certs/mq-server.ca.key sda-mq/files/server.key
    - name: Deploy SDA message broker
      run: |
        CEGA_MQ_PASS=$(grep cega_mq_pass LocalEGA-deploy-init/config/trace.yml | awk {'print $2'} | sed --expression 's/\"//g')
        helm install broker sda-mq \
        --set securityPolicy.create=false,\
        config.adminUser=admin,\
        config.adminPasswordHash="DI0kJIvQHptGSBH2coZ25dsjjN9Z4uxp8hAyqtd9H7rb/SBO",\
        config.shovel.host="cega-mq",\
        config.shovel.user=lega,\
        config.shovel.pass=$CEGA_MQ_PASS,\
        config.shovel.vhost=lega,\
        config.verifyPeer=false
    - name: Wait for broker to become ready
      run: |
        RETRY_TIMES=0
        until kubectl get pods -lrole=broker -o jsonpath='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status}' | grep "Ready=True";
        do echo "waiting for broker to become ready";
        RETRY_TIMES=$((RETRY_TIMES+1));
        if [ $RETRY_TIMES -eq 10 ]; then exit 1; fi
        sleep 10;
        done
    - name: debug MQ
      if: failure()
      run: kubectl describe pod -l role=broker
    - name: log MQ
      if: failure()
      run: kubectl logs broker-sda-mq-0
    - name: Helm add stable repo
      run: |
        helm repo add stable https://kubernetes-charts.storage.googleapis.com/
        helm repo update
    - name: Install minio
      run: |
        cp LocalEGA-deploy-init/config/certs/s3.ca.crt public.crt
        cp LocalEGA-deploy-init/config/certs/s3.ca.key private.key
        kubectl create secret generic minio-certs --from-file=public.crt --from-file=private.key
        MINIO_ACCESS=$(grep s3_archive_access_key LocalEGA-deploy-init/config/trace.yml | awk {'print $2'} | sed --expression 's/\"//g')
        MINIO_SECRET=$(grep s3_archive_secret_key LocalEGA-deploy-init/config/trace.yml | awk {'print $2'} | sed --expression 's/\"//g')
        helm install minio \
        --set accessKey=$MINIO_ACCESS,secretKey=$MINIO_SECRET,\
        tls.enabled=true,tls.certSecret=minio-certs,\
        persistence.enabled=false,service.port=443 stable/minio --version 5.0.0
    - name: Wait for minio to become ready
      run: |
        RETRY_TIMES=0
        until kubectl get pods -lapp=minio -o jsonpath='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status}' | grep "Ready=True";
        do echo "waiting for minio to become ready"
        RETRY_TIMES=$((RETRY_TIMES+1));
        if [ $RETRY_TIMES -eq 10 ]; then exit 1; fi
        sleep 10;
        done
    - name: debug minio
      if: failure()
      run: kubectl describe pod -l app=minio
    - name: log minio
      if: failure()
      run: kubectl logs $(kubectl get pods | grep minio | awk '{print $1}')
    - name: Prepare for deployment
      run: |
        cp LocalEGA-deploy-init/config/token.pub sda-svc/files/
        cp LocalEGA-deploy-init/config/ega_key.c4gh.sec sda-svc/files/c4gh.key
        cp LocalEGA-deploy-init/config/certs/doa.p12 sda-svc/files/
        cp LocalEGA-deploy-init/config/certs/cacerts sda-svc/files/
        cp LocalEGA-deploy-init/config/certs/root.ca.crt sda-svc/files/ca.crt
        for n in doa finalize ingest verify inbox
          do cp LocalEGA-deploy-init/config/certs/$n.ca.crt sda-svc/files/$(echo $n.ca.crt | cut -d '.' -f1,3)
        done
        for n in doa finalize ingest verify inbox
          do cp LocalEGA-deploy-init/config/certs/$n.ca.key sda-svc/files/$(echo $n.ca.key | cut -d '.' -f1,3)
        done
        cp LocalEGA-deploy-init/config/certs/res.ca.crt sda-svc/files/auth.crt
        cp LocalEGA-deploy-init/config/certs/res.ca.key sda-svc/files/auth.key
    - name: Deploy the SDA stack
      run: |
        CEGA_USERS_PASS=$(grep cega_users_pass LocalEGA-deploy-init/config/trace.yml | awk {'print $2'} | sed --expression 's/\"//g')
        DB_IN_PASS=$(grep pg_in_password LocalEGA-deploy-init/config/trace.yml | awk {'print $2'} | sed --expression 's/\"//g')
        DB_OUT_PASS=$(grep pg_out_password LocalEGA-deploy-init/config/trace.yml | awk {'print $2'} | sed --expression 's/\"//g')
        S3_ACCESS_KEY=$(grep s3_archive_access_key LocalEGA-deploy-init/config/trace.yml | awk {'print $2'} | sed --expression 's/\"//g')
        S3_SECRET_KEY=$(grep s3_archive_secret_key LocalEGA-deploy-init/config/trace.yml | awk {'print $2'} | sed --expression 's/\"//g')
        C4GH_PASSPHRASE=$(grep ega_c4gh_passphrase LocalEGA-deploy-init/config/trace.yml | awk {'print $2'} | sed --expression 's/\"//g')
        helm install sda sda-svc -f .github/ci_tests/s3.yaml \
        --set global.archive.s3AccessKey="$S3_ACCESS_KEY",\
        global.archive.s3SecretKey="$S3_SECRET_KEY",\
        global.c4gh.passphrase="$C4GH_PASSPHRASE",\
        global.cega.password="$CEGA_USERS_PASS",\
        global.db.passIngest="$DB_IN_PASS",\
        global.db.passOutgest="$DB_OUT_PASS",\
        global.inbox.s3AccessKey="$S3_ACCESS_KEY",\
        global.inbox.s3SecretKey="$S3_SECRET_KEY"
    - name: Wait for SDA stack to become ready
      run: |
        RETRY_TIMES=0
        for p in auth doa finalize inbox ingest verify
        do
        until kubectl get pods -lrole=$p -o jsonpath='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status}' | grep "Ready=True"
        do echo "waiting for $p to become ready"
        RETRY_TIMES=$((RETRY_TIMES+1));
        if [ $RETRY_TIMES -eq 30 ]; then exit 1; fi
        sleep 10;
        done
        done
    - name: debug sda
      if: failure()
      run: |
        for s in auth doa finalize ingest verify inbox
        do kubectl describe pod -l role=$s
        done
    - name: log sda
      if: failure()
      run: |
        for s in auth doa finalize ingest verify inbox
        do kubectl logs $(kubectl get pods | grep $s | awk '{print $1}')
        done 
